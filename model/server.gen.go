// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package model

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /articles)
	GetArticles(ctx echo.Context, params GetArticlesParams) error

	// (POST /articles)
	PostArticle(ctx echo.Context) error

	// (DELETE /articles/{id})
	DeleteArticle(ctx echo.Context, id int64) error

	// (GET /articles/{id})
	GetArticle(ctx echo.Context, id int64) error

	// (GET /feeds)
	GetFeeds(ctx echo.Context) error

	// (POST /feeds)
	PostFeed(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArticles converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams
	// ------------- Optional query parameter "feeds" -------------

	err = runtime.BindQueryParameter("form", true, false, "feeds", ctx.QueryParams(), &params.Feeds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feeds: %s", err))
	}

	// ------------- Optional query parameter "categories" -------------

	err = runtime.BindQueryParameter("form", true, false, "categories", ctx.QueryParams(), &params.Categories)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categories: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticles(ctx, params)
	return err
}

// PostArticle converts echo context to params.
func (w *ServerInterfaceWrapper) PostArticle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostArticle(ctx)
	return err
}

// DeleteArticle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArticle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteArticle(ctx, id)
	return err
}

// GetArticle converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArticle(ctx, id)
	return err
}

// GetFeeds converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeeds(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFeeds(ctx)
	return err
}

// PostFeed converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeed(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFeed(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/articles", wrapper.GetArticles)
	router.POST(baseURL+"/articles", wrapper.PostArticle)
	router.DELETE(baseURL+"/articles/:id", wrapper.DeleteArticle)
	router.GET(baseURL+"/articles/:id", wrapper.GetArticle)
	router.GET(baseURL+"/feeds", wrapper.GetFeeds)
	router.POST(baseURL+"/feeds", wrapper.PostFeed)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXUW/bNhD+Kwd2wDBAsNO02IPe0nnZDAxLMeQtNQZaOllsJVIlT0kMQ/99OFKy5EiJ",
	"k6XBMvTFFqUj7+N9n76jdiIxZWU0anIi3gmX5FhKf3lmSSUF8qUsiotMxFc78YPFTMTizbyfNm/nzP/E",
	"m25OEz0c2sb9HRZuVk0kDm/FO1FZU6ElhR6NSvk3M7aUJGKhNP38XkSCthWGIW7QiqaJhMWvtbKYiviK",
	"Z632QWb9GRMSTSR+tdbYcY7EpHg3y7vTiSyRKNE5ufHR7UNHVunNCIFfs4+fQnOOmD6pyn7CsRJz0LC+",
	"g/HLFncgg3gn8FaWVbhMJOHGWJ/zajiKhoNVJDJfkPAXiapeF8rlmC4kcabDcSRqW4jY/zbRXUIHGXdC",
	"EZZugrH9HqS1csvjrGVkFHgHy0SER3NMFBx0T+k6MRyr2/ZtX7btKa8W6tDOmyWm/Hb1eMamOErpzPD8",
	"FF1iVUXKaFbtGzjTcPZxCZRLggLJQVI7MiVaByw6KxOCG0U5/KH0FwdSpyCDtNwnfZkrBy43dZHCGkHC",
	"GonQQpLX+guYDFKT1CVqkpwQLj/8DvFPnzTrWhFXtrMcxyBEJK7RugDt7exkdsIbNxVqWSkRi3f+ViQq",
	"Sbkv2rxDwoMN0niDfyHVVjuQRTGALfyq1oNassx/Q+qA+PWtLJHQOu8EhyuyLh2QgUwVvNX1VkQCb6vC",
	"GxfZGrnYIhZfa7T8TMsSu3kiat39adw72vpisTt40zmE1EvqX+A68IDng1uxIF1ltAusnJ6cBFvXhNoT",
	"JKuqUImv/fyz4w3spvI+onWN0bDSD2vTkQ4dKuFDMlkX9CRgD+EJvWwie63xtsKEMAXsYyrjJqT6i0VJ",
	"6ECCxptOrKA0UI7gyFicwaIOEDnMIqva3HiDPpTzR+M6PYtgEOjog0m332zHw3PGeNvtI1ajTFP+2+9B",
	"DA2LVdk8UzCP0sm9ung9smii3s7mO5U2QSEFhiZ3uEC4z1pxSm8K3MtlLR2mYIJolgtwNaOfkMjCr9CL",
	"5EHPWy7Yy2XPaotrYDCZLFznMOzPvcGodMT50GiOnnh6h3HKt+MJj3k/LlGHNkBNX8Fr/3CD0mMO9+wu",
	"FxGozHNaO7SQGnSgDUEurxFkkqBz3Vsm95Te1+KezHaGlOSvh+zv1x/CGeIxZx0fOX3QOW8PIi/fpttv",
	"pKM92iP6vzXoAPox7RnwGjnM1Juco7dQWbOW62LbHp31jwRrnIE/TStOcHmxuJhNtvXz8EH2Qj09MDbN",
	"0H/eze8Dx1p/Re8pexja685bwydhTlTF8/nBl+Gq+ScAAP//BFURT/oRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

